from pydantic import BaseModel
from textwrap import dedent


class BailianPromptConfig(BaseModel):
    """
    NOTE 不需要strip() 拼装会统一strip
    """

    info_filter_system: str = dedent("""
        任务指令：对所给{batch_size}个句子中所含有的关于用户的信息打分，分数为0,1,2或3。
        注意：其中0表示不包含用户信息，1表示句子中包含用户假设的信息或者用户虚构的内容，2表示可以对用户信息做一些不准确的猜测，3表示明确含有关于用户的有效信息或者可以推断出用户准确的信息或者用户要求记录。
        按如下格式输出, 每一行输出一个打分，一定加<>，一共输出{batch_size}个分数:
        结果：
        <分数:0或1或2或3>
    """)


    info_filter_few_shot: str = dedent("""
        示例1
        句子：
        1 用户：帮我写一段给同事张三女儿三岁生日的祝福语。
        2 用户：公元1400年至1550年中国历史大事表。
        3 用户：你吃午饭了吗？
        4 用户：我今天心情不好，可以安慰我一下吗？
        5 用户：能给我整理一张如何使用大模型的技巧列表吗，要求内容尽量精简。
        6 用户：明天下午3点提醒我去拿一下文件。
        结果：
        <3>
        <0>
        <0>
        <2>
        <2>
        <3>

        示例2
        句子：
        1 用户：我刚刚入职了阿里巴巴。
        2 用户：露天睡觉蚊子多，咋搞。
        3 用户：创造力和外倾性有关？
        4 用户：一个区县的所有的事业人员的档案审核、修改和规范，应该是县委组织部下属的干部档案中心负责还是县人社局负责？
        5 用户：假如我要和一个女人准备要孩子，我作为男人，怎么保护女人和孩子以及怎么备孕确保精子质量高对后代好
        6 用户：我和你一起出去玩，你会感觉开心吗？
        结果：
        <3>
        <2>
        <0>
        <0>
        <1>
        <1>

        示例3
        句子：
        1 用户：你的妈妈患有焦虑症，怎么安慰和开导她？
        2 用户：肾脏严重亏空
        3 用户：我很喜欢打篮球，所以我身体很好
        4 用户：篮球明星有哪些？
        结果：
        <1>
        <1>
        <3>
        <0>
    """)
    info_filter_user_query: str = """
句子：
{user_query}
结果：
    """

    """
    思考：思考的依据和过程，不超过20字。
    """
    get_observation_system: str = """
任务：从下面的{num_obs}句用户句子中依次提取出关于用户的重要信息，与相应的关键词。最多提取{num_obs}条信息。对每一句句子，只提取非常明确的信息，不要进行任何推测。
不要提取重复的信息，如果句子中的所有信息与已经提取出的信息重复了则回答“重复“，如果没有重要信息则回答“无”。
请一定要按如下格式依次输出，最后的结果一定要加<>:
信息：<句子序号> <> <明确的重要信息或“重复”或”无“> <关键词>
    """

    """
思考：从第1句可以得知用户现在没有工作，负债几万，这是关于用户工作与经济状况的重要信息。
思考：第2句是用户对他人观点的讨论和疑问，没有明确提及用户个人信息。
思考：第3句含有的信息与第1句重复了。
思考：从第4句可以得知用户是一个刚毕业的学生，这是关于用户身份背景状况的重要信息。其余信息重要性不足。
思考：从第1句可以得知张三是用户的同事，这是关于用户的人际关系的重要信息。其余信息重要性不足。
思考：第2句是用户提出的要求，没有明确提及用户个人信息。
思考：从第3句可以得知用户前天打羽毛球时把球拍打断了线，但这不是重要的信息。还可以得知用户对猫毛过敏，这是关于用户的健康的重要信息。
思考：从第4句是用户提出的要求，没有明确提及用户个人信息。
思考：从第5句可以得知用户在阿里巴巴徐汇滨江园区工作，这是关于用户的工作地点的重要信息。
思考：从第1句可以得知用户寻求购买新能源汽车的建议或推荐，这是这是关于用户的大宗消费的重要的信息。
思考：从第2句可以得知用户当前所在城市为上海，这是关于用户的生活地区的重要信息。其余信息与第1句重复了。
思考：第3句是用户对某个观点的讨论和疑问，没有明确提及用户个人信息。
思考：第4句是用户提出的要求，没有明确提及用户个人信息。
思考：从第5句可以得知用户购买了海天味业股票，购买数量为100股，购买金额为5000元，这是关于用户的投资决策的重要信息。
    """
    get_observation_few_shot: str = """
示例1：
用户句子：
1 用户：我现在处境很糟，没有工作，负债几万，怎么办
2 用户：有人说兴趣是最好的老师，也建议兴趣和职业联系起来，但我发现喜欢打篮球的人很多，但靠打篮球成职业的稀少，赚钱的更少，此外，怎么分辨兴趣和喜欢
3 用户：我现在处境很糟，没有工作，负债几万，怎么办
4 用户：我是一个刚毕业的学生，对社会，行业不了解，给我介绍一下社会系统和行业格局
思考：从第1句可以得知用户现在没有工作，负债几万，这是关于用户工作与经济状况的重要信息。
信息：<1> <> <用户当前无工作且负债几万> <无工作, 负债几万>
思考：第2句是用户对他人观点的讨论和疑问，没有明确提及用户个人信息。
信息：<2> <> <无> <>
思考：第3句含有的信息与第1句重复了。
信息：<3> <> <重复> <>
思考：从第4句可以得知用户是一个刚毕业的学生，这是关于用户身份背景状况的重要信息。其余信息重要性不足。
信息：<4> <> <用户是一名刚毕业的学生。> <刚毕业, 学生>

示例2：
用户句子：
1 用户：帮我写一段给同事张三女儿三岁生日的祝福语。
2 用户：能给我整理一张如何使用大模型的技巧列表吗，要求内容尽量精简。
3 用户：两个坏消息，我打羽毛球把拍子打断线了。。。然后我去我朋友家撸猫，结果我猫毛过敏，今天疯狂打喷嚏。。。
4 用户：公元1400年至1550年中国历史大事表。
5 用户：谢啦。我中午在公司附近吃，帮我推荐一家阿里巴巴徐汇滨江园区附近的餐厅吧。
思考：从第1句可以得知张三是用户的同事，这是关于用户的人际关系的重要信息。其余信息重要性不足。
信息：<1> <> <张三是用户的同事。> <张三, 同事>
思考：第2句是用户提出的要求，没有明确提及用户个人信息。
信息：<2> <> <无> <>
思考：从第3句可以得知用户前天打羽毛球时把球拍打断了线，但这不是重要的信息。还可以得知用户对猫毛过敏，这是关于用户的健康的重要信息。
信息：<3> <> <用户对猫毛过敏。> <猫毛, 过敏>
思考：从第4句是用户提出的要求，没有明确提及用户个人信息。
信息：<4> <> <无> <>
思考：从第5句可以得知用户在阿里巴巴徐汇滨江园区工作，这是关于用户的工作地点的重要信息。
信息：<5> <> <用户在阿里巴巴徐汇滨江园区工作。> <阿里巴巴, 徐汇滨江园区, 工作>

示例3：
用户句子：
1 用户：我想买辆新能源汽车，有什么推荐吗？
2 用户：我在上海，想买辆新能源汽车，有什么推荐吗？
3 用户：案外人异议审查期间，人民法院不得对执行标的进行处分，不就是中止执行的意思吗？
4 用户：请写两句藏头诗分别以“胜”和“利”开头。
5 用户：我花5000元买了100股海天味业。
思考：从第1句可以得知用户寻求购买新能源汽车的建议或推荐，这是这是关于用户的大宗消费的重要的信息。
信息：<1> <> <用户寻求购买新能源汽车的建议或推荐。> <购买, 新能源汽车>
思考：从第2句可以得知用户当前所在城市为上海，这是关于用户的生活地区的重要信息。其余信息与第1句重复了。
信息：<2> <> <用户所在的城市是上海。> <上海>
思考：第3句是用户对某个观点的讨论和疑问，没有明确提及用户个人信息。
信息：<3> <> <无> <>
思考：第4句是用户提出的要求，没有明确提及用户个人信息。
信息：<4> <> <无> <>
思考：从第5句可以得知用户购买了海天味业股票，购买数量为100股，购买金额为5000元，这是关于用户的投资决策的重要信息。
信息：<5> <> <用户购买了海天味业股票，购买数量为100股，购买金额为5000元。> <海天味业, 股票>
    """

    get_observation_user_query: str = """
用户句子：
{user_query}
        """

    get_observation_with_time_system: str = """
任务：从下面的{num_obs}句用户句子中依次提取出关于用户的重要信息，相应的关键词与时间信息。
每一句用户句子的格式是：<序号> <对话时间> 用户：<句子>
对每一句句子，只提取非常明确的重要信息，不要进行任何推测。不要提取重复的信息，如果句子中的所有信息与已经提取出的信息重复了则回答“重复“，如果没有重要信息则回答“无”。
如果用户信息涉及时间，则结合对话时间推断用户信息的时间信息，没有则不输出。
请一步步思考，并一定要按如下格式依次输出，最后的结果一定要加<>:
信息：<句子序号> <时间信息或“无”> <明确的重要信息或“重复”或”无“> <关键词>
        """

    get_observation_with_time_few_shot: str = """
示例1：
句子：
1 2022年5月1日周二3点 用户：帮我写一段给同事张三女儿三岁生日的祝福语。
2 2022年5月2日周二17点 用户：公元1400年至1550年中国历史大事表。
3 2022年5月3日周二18点 用户：能给我整理一张如何使用大模型的技巧列表吗，要求内容尽量精简。
4 2022年7月3日周四12点 用户：上上个月我办了游泳卡。

思考：从第1句可以得知张三是用户的同事，这是关于用户的人际关系的重要信息。其余信息重要性不足。用户信息不涉及时间。
信息：<1> <> <张三是用户的同事。> <张三, 同事>
思考：第2句是用户提出的要求，没有明确提及用户个人信息。
信息：<2> <> <无> <>
思考：第3句是用户提出的要求，没有明确提及用户个人信息。
信息：<3> <> <无> <>
思考：从第4句可以得出用户上上个月办了游泳卡。用户信息涉及时间，结合对话时间为2022年7月，推断用户在2022年5月用户办了游泳卡。
信息：<4> <2022年5月> <用户在2022年5月办了游泳卡。> <游泳卡>


示例2：
句子：
1 2020年1月4日周日10点 用户：我花5000元买了100股海天味业。
2 2023年4月27日周五8点 用户：明天是我和妻子的结婚纪念日，帮我推荐一家餐厅。
3 2020年1月4日周日10点 用户：我花5000元买了100股海天味业。
4 2021年6月2日周四23点 用户：谢啦。我中午在公司附近吃，帮我推荐一家阿里巴巴徐汇滨江园区附近的餐厅吧。
5 2021年7月9日周六11点 用户：两个坏消息，我打羽毛球把拍子打断线了。。。然后我去我朋友家撸猫，结果我猫毛过敏，今天疯狂打喷嚏。。。

思考：从第1句可以得知用户购买了海天味业股票，购买数量为100股，购买金额为5000元，这是关于用户的投资决策的重要信息。用户信息不涉及时间。
信息：<1> <> <用户购买了海天味业股票，购买数量为100股，购买金额为5000元。> <海天味业, 股票>
思考：从第2句可以得知用户与妻子的结婚纪念日是明天，这是关于用户重要纪念日的信息。其余信息重要性不足。用户信息涉及时间，结合对话时间为2023年4月27日，
以及结婚纪念日为周期性日期，推断用户与妻子的结婚纪念日是每年4月28日。
信息：<2> <每年4月28日> <用户与妻子的结婚纪念日是每年4月28日。> <妻子, 结婚纪念日>
思考：第3句含有的信息与第1句重复了。
信息：<3> <> <重复> <>
思考：从第4句以得知用户在阿里巴巴徐汇滨江园区工作，这是关于用户的工作的重要信息。其余信息重要性不足。用户信息不涉及时间。
信息：<4> <> <用户在阿里巴巴徐汇滨江园区工作。> <阿里巴巴, 徐汇滨江园区, 工作>
思考：从第5句可以得知用户前天打羽毛球时把球拍打断了线，但这不是重要的信息。还可以得知用户对猫毛过敏，这是关于用户的健康的重要信息。用户信息不涉及时间。
信息：<5> <> <用户对猫毛过敏。> <猫毛, 过敏>


示例3：
句子：
1 2023年6月30日周五15点 用户：上个月我和家人一起去杭州旅游，景色很不错。
2 2023年7月2日周二10点 用户：昨天是我生日，一个人过的。
3 2020年7月3日周四11点 用户：提醒我下周一去体检。
4 2023年5月21日周六14点 用户：有人说兴趣是最好的老师，也建议兴趣和职业联系起来，但我发现喜欢打篮球的人很多，但靠打篮球成职业的稀少，赚钱的更少，此外，怎么分辨兴趣和喜欢

思考：从第1句可以得知用户和家人上个月去杭州旅游了，这是关于用户的经历的重要信息。其余信息重要性不足。用户信息涉及时间，结合对话时间为2023年6月推断用户和家人2023年5月去杭州旅游了。
信息：<1> <2023年5月> <用户和家人2023年5月去杭州旅游了。> <家人, 杭州, 旅游>
思考：从第2句可以得知用户的生日是昨天，这是关于用户重要纪念日的信息。其余信息重要性不足。用户信息涉及时间，结合对话时间为2023年7月2日，
以及生日为周期性日期，推断用户的生日是每年7月2日。
信息：<2> <每年7月2日> <用户的生日是每年7月2日。> <生日>
思考：从第3句可以得出用户下周一去体检，这是用户要求记忆的重要信息。用户信息涉及时间，结合对话时间为2020年7月3日周四，推断用户2020年7月6日周一去体检。
信息：<3> <2020年7月6日周一> <用户2020年7月6日周一去体检。> <体检>
思考：第4句是用户对他人观点的讨论和疑问，没有明确提及用户个人信息。
信息：<4> <> <无> <>
        """

    get_observation_with_time_user_query: str = """
用户句子：
{user_query}
    """

    contra_repeat_system: str = """
对下面的{num_obs}句句子，逐一判断是否与“前面序号”的任意句子存在信息的矛盾，或者句子的主要信息被“前面序号”的任意句子中的信息包含。只判断与“前面序号”的句子的关系。
请一步步思考，并按如下格式输出:
思考：思考的依据和过程，30字以内。
判断：<句子序号> <矛盾，被包含，无>，一定加<>
"""

    contra_repeat_few_shot: str = """
示例1
句子：
1 用户经常失眠，对安眠药的效果感兴趣，暗示可能考虑使用。
2 用户经常失眠，寻求缓解方法。
3 陈伟业是用户的领导
4 陈伟业是用户的领导
5 陈伟业是用户的领导，是银行分行行长

思考：第1句不会存在与前面序号句子的矛盾或者完全重复。
判断：<1> <无>
思考：第2句中所有信息都被前面序号中第1句的信息完全包含。
判断：<2> <被包含>
思考：第3句信息没有在前面序号句子中出现
判断：<3> <无>
思考：第4句与前面序号中第3句的信息完全重复，即被完全包含。
判断：<4> <被包含>
思考：第5句中陈伟业是用户的领导的信息被前面序号中第3句的信息包含，但新增了陈伟业是银行分行行长的信息，故不是被完全包含。
判断：<5> <无>

示例2
句子：
1 用户的孩子成绩不太好。
2 用户的孩子在学校经常逃课。
3 用户的父亲生日在2024年6月2日，用户打算准备礼物。
4 用户的父亲生日在2024年5月1日。
5 用户很喜欢和同班同学打篮球。
6 用户喜欢打篮球。

思考：第1句不会存在与前面序号句子的矛盾或者完全重复。
判断：<1> <无>
思考：第2句与前面序号句子既不矛盾也不重复。
判断：<2> <无>
思考：第3句与前面序号句子既不矛盾也不重复。
判断：<3> <无>
思考：第4句关于用户父亲生日的日期信息与前面序号句子第3句矛盾了。
判断：<4> <矛盾>
思考：第5句与前面序号句子既不矛盾也不重复。
判断：<5> <无>
思考：第6句中所有信息都被前面序号中第5句的信息完全包含。
判断：<2> <被包含>
    """

    contra_repeat_user_query: str = """
句子：
{user_query}
    """

    long_contra_repeat_system: str = """
    对下面的{num_obs}句句子，逐一判断是否与“前面序号”的任意句子存在信息的矛盾，或者句子的主要信息被“前面序号”的任意句子中的信息包含。只判断与“前面序号”的句子的关系。
    请一步步思考，并按如下格式输出:
    思考：思考的依据和过程，30字以内。
    判断：<句子序号> <矛盾，被包含，无>，一定加<>
    """

    long_contra_repeat_few_shot: str = """
    示例1
    句子：
    1 用户经常失眠，对安眠药的效果感兴趣，暗示可能考虑使用。
    2 用户经常失眠，寻求缓解方法。
    3 陈伟业是用户的领导
    4 陈伟业是用户的领导
    5 陈伟业是用户的领导，是银行分行行长

    思考：第1句不会存在与前面序号句子的矛盾或者完全重复。
    判断：<1> <无>
    思考：第2句中所有信息都被前面序号中第1句的信息完全包含。
    判断：<2> <被包含>
    思考：第3句信息没有在前面序号句子中出现
    判断：<3> <无>
    思考：第4句与前面序号中第3句的信息完全重复，即被完全包含。
    判断：<4> <被包含>
    思考：第5句中陈伟业是用户的领导的信息被前面序号中第3句的信息包含，但新增了陈伟业是银行分行行长的信息，故不是被完全包含。
    判断：<5> <无>

    示例2
    句子：
    1 用户的孩子成绩不太好。
    2 用户的孩子在学校经常逃课。
    3 用户的父亲生日在2024年6月2日，用户打算准备礼物。
    4 用户的父亲生日在2024年5月1日。
    5 用户很喜欢和同班同学打篮球。
    6 用户喜欢打篮球。

    思考：第1句不会存在与前面序号句子的矛盾或者完全重复。
    判断：<1> <无>
    思考：第2句与前面序号句子既不矛盾也不重复。
    判断：<2> <无>
    思考：第3句与前面序号句子既不矛盾也不重复。
    判断：<3> <无>
    思考：第4句关于用户父亲生日的日期信息与前面序号句子第3句矛盾了。
    判断：<4> <矛盾>
    思考：第5句与前面序号句子既不矛盾也不重复。
    判断：<5> <无>
    思考：第6句中所有信息都被前面序号中第5句的信息完全包含。
    判断：<2> <被包含>
        """

    long_contra_repeat_user_query: str = """
    句子：
    {user_query}
        """

    get_reflect_system: str = """
任务：从下面的信息中提取出最重要的{num_questions}条用户属性，要求不与已有的用户属性语义重复。
要求1：用户属性可以是一般的用户偏好，也可以是运动偏好，旅游偏好，饮食偏好等等，也可以是重要事件性质，比如最近重要的事情，也可以是一些高度概括的人生理想，价值观，人生观，性格， 也可以是和朋友的人际关系等等。
要求2：根据用户属性，我们可以生成“用户的<用户属性>是什么？”的问题，以此可以从下面的信息中提取用户属性对应的值。
输出格式：每一行输出一个用户属性，每个用户属性推荐4个字，如果没有信息请回答无，最多输出{num_questions}条。
    """

    get_reflect_few_shot: str = """
示例1
信息：
用户想知道明天上海的天气情况。
用户可能在上海工作，并关心是否需要带伞上班。
用户在阿里巴巴徐汇滨江园区附近工作。
用户计划中午在公司附近用餐。
用户对咖啡因过敏。
用户喝了咖啡后晚上会出现失眠的情况。
用户偏好口味较为清淡、不辣的中餐馆。
用户刚开始了他们的第一份工作。
用户的工作岗位是阿里巴巴的算法工程师。
用户希望得到与该岗位相关的职场建议。
用户面临的问题是在项目进展初期如何有效与上司沟通。
用户的目标是及时同步项目状态给上司。
用户希望了解image generation（图像生成）技术的发展概览和最新进展。
用户对variational auto-encoder、GAN、Diffusion Model等技术及其相互关系感兴趣。
已有用户属性：性别，工作地点，工作单位，睡眠状况，美食偏好
新增用户属性：
过敏源
技术方向
工作岗位


示例2
信息：
用户想要了解如何使用torchvision库来可视化深度学习任务的进度信息。
用户希望了解如何将基于numpy和pytorch的并行计算方案迁移到CUDA支持的GPU上运行。
用户询问是否需要依赖特定的包来完成这一任务。
用户希望了解如何在Python中自定义进程和线程以实现并行计算。
用户在编程中遇到了与并行计算相关的问题。
用户希望学习如何使用Python（numpy，pytorch）在GPU上实现简单的并行计算。
用户希望了解并行计算的基本概念，包括threads。
用户询问有关世界各地著名菜系的信息。
用户对全球各地的美食非常感兴趣。
用户关心其体重与运动消耗的额外热量及心率之间的关系。
用户在询问为了实现这一目标，每天需要额外消耗多少大卡热量。
用户希望每月减重1kg。
用户希望得到类似战略类手机游戏的推荐。
用户喜欢玩三国志系列、文明系列、全面战争、骑马与砍杀等战略类游戏。
用户希望根据他们的喜好获得新的游戏推荐。
用户列举了他们喜欢的具体游戏类型，包括：三国志系列、文明系列、全面战争、骑马与砍杀等。
用户喜欢玩战略类游戏。
已有用户属性：工作地点，性别，美食偏好
新增用户属性：
游戏偏好
运动计划
技术方向

示例3
信息：
用户寻求推荐一个相关课程或网址以进行学习。
用户计划去青岛旅游。
用户正为张三的女儿选购生日礼物。
用户请求为一位名叫张三的人的女儿撰写一段温馨的祝福语。
用户的同事名叫张三。
用户与张三约定讨论阿里云百炼项目。
用户与同事张三讨论了该项目的PRD（产品需求文档）。
同事张三计划下周对PRD进行最终确定。
张三还安排了在再下一周进行POC（Proof of Concept，概念验证）的讨论。
用户希望获知该项目工程开发工作的负责团队信息，以了解项目执行的组织架构与分工情况。
已有用户属性：
新增用户属性：
朋友关系

示例4
信息：
用户在寻求有关推拿按摩手法的教程或相关网站推荐。
用户希望系统地学习正规的推拿按摩手法。
用户对按摩感兴趣，并且经常去推拿按摩店。
用户想了解自己在静息状态下一小时大概会消耗多少大卡热量。
用户年龄为28岁。
用户体重为70kg。
用户是男性。
已有用户属性：性别，年龄，体重，当前学习进展
新增用户属性：
无
    """

    get_reflect_user_query: str = """
信息：
{user_query}
已有用户属性：{exist_keys}
新增用户属性：
    """

    get_insight_system: str = """
任务：从下面的信息中提取出关于用户属性信息。语言简洁，每条不超过50字。请在一句话内表达，语言简洁，每条不超过50字。
    """

    get_insight_few_shot: str = """
示例1
信息：
用户考虑是否应该给猫咪Sally购买一些猫玩具。
用户家中有一只名为Sally的宠物，需要在室内自由活动以保障其身心健康。
用户想要为名为Sally的宠物购买猫粮。
用户养有一只名叫Sally的猫，并很喜欢它。
孙二为这只猫取名为“Sally”。
用户希望得到关于购买何种猫粮的建议。
用户希望了解不同品种猫咪的基本信息。
用户对猫毛过敏。
用户关心领养猫与在宠物店购买猫之间的区别。
用户正在寻求治疗猫毛过敏的方法。
问题：用户的过敏源是什么？
用户对猫毛过敏，正寻求有效的解决方案，以便更好地照顾其宠物猫Sally并减轻过敏症状。

示例2
信息：
用户的工作岗位是阿里巴巴的算法工程师。
用户希望详细了解和学习图像生成技术。
用户面临的问题是在项目进展初期如何有效与上司沟通。
用户希望了解image generation（图像生成）技术的发展概览和最新进展。
用户希望得到与该岗位相关的职场建议。
用户刚开始了他们的第一份工作。
用户的身份可能是初学者或专业人士。
用户希望学习如何使用Python（numpy，pytorch）在GPU上实现简单的并行计算。
用户想要了解如何使用torchvision库来可视化深度学习任务的进度信息。
用户对variational auto-encoder、GAN、Diffusion Model等技术及其相互关系感兴趣。
问题：用户的技术方向是什么？
用户是初入职场的阿里巴巴算法工程师，正积极探索图像生成技术和并行计算的知识，并寻求技术学习方面的指导，以提升自己的专业技能。
    """

    get_insight_user_query: str = """
信息：
{user_query}
问题：用户的{insight_key}是什么？
    """

    update_plural_profile_system: str = """
从下面的句子中提取出给定类别的用户资料信息，并判断和已有信息是否重复。只输出无重复的新信息。若无法提取该类别的用户资料的新信息则回答无。
请一步步思考，并按如下格式输出:
思考: 思考的依据和过程，150字以内。
用户资料: <信息>或<无>, 一定加<>
    """

    update_plural_profile_few_shot: str = """
示例1:
句子：用户上周去了西溪游泳馆游泳，那个游泳馆人非常多。
句子：用户计划每周六和朋友张三去朝阳体育馆打羽毛球。
类别：运动（用户喜欢的运动）
已有信息：运动（用户喜欢的运动）：游泳
思考：从第一句句子可以得出游泳是用户喜欢的运动之一，但与已有信息重复。从第二句句子可以得出羽毛球是用户喜欢的运动之一，是新的信息。
用户资料: <羽毛球>

示例2:
句子：用户对咖啡因过敏。
句子：用户不喜欢吃香菇。
类别：过敏（用户的已知过敏反应）
已有信息：过敏（用户的已知过敏反应）: 咖啡因
思考：从第一句句子可以得出咖啡因是用户的已知过敏反应之一，但与已有信息重复。从第二句句子只能得出用户不喜欢香菇而非对香菇过敏，无法得出新的用户已知过敏信息。
用户资料: <无>

示例3:
句子：用户热衷于动作类类游戏如只狼、艾尔登法环。
句子：用户在休闲时间经常长时间玩策略类游戏如文明6。
句子：用户是音乐发烧友，关注各个品牌的耳机的音质和性价比。
类别：爱好（用户的业余爱好）
已有信息：爱好（用户的业余爱好）:
思考：从第一句句子可以得出动作类游戏是用户的爱好之一，是新的信息。从第二句句子可以得出策略类游戏是用户的爱好之一，是新的信息。从第三句句子可以得出音乐是用户的爱好之一，是新的信息。
用户资料: <动作类游戏, 策略类游戏, 音乐>

示例4:
句子：关于职场沟通你有什么具体的建议吗？最好结合一个实例。我一直听人说要加强沟通，经常和上司沟通，同步项目的进展，但是我总是感觉还有许多事情要做。
句子：项目并没有达到一个充分的可以汇报的状态，然后准备汇报材料又很费时间，导致有时候我没有及时和上司同步项目状态。针对这个情况你有什么建议？
类别：职业（用户的职业）
已有信息：职业（用户的职业）：工程师
思考：句子中虽然提及了职场沟通等工作相关内容，但是并不能推断出用户的职位是什么，只能推知与宽泛的项目实施与管理相关。
用户资料: <无>
    """

    update_plural_profile_user_query: str = """
{user_query}
类别：{update_profile}
已有信息：{update_profile_value}
    """

    update_unique_profile_system: str = """
从下面的句子中提取出给定类别的用户资料信息，并判断与已有信息是否矛盾。若矛盾则输出更新的信息，若不矛盾则保留已有信息，整合已有信息和新信息并输出。
请一步步思考，并按如下格式输出:
思考: 思考的依据和过程，150字以内。
用户资料: <信息>, 一定加<>
    """

    update_unique_profile_few_shot: str = """
示例1:
句子：因为昨天成都下大雨，用户全身都被淋湿了。
句子：用户关心明天成都的天气预报。
类别：地区（用户所在地区）
已有信息：地区（用户所在地区）: 杭州
思考：从第一句句子可以得出用户在成都。第二句句子没有直接透露用户所在地信息，但与第一句句子用户在成都的信息吻合。这与已有信息（用户在杭州）矛盾，输出更新的信息。
用户资料：<成都>

示例2:
句子：用户女朋友下个月过生日。
句子：用户生日在7月15日。
类别：生日（用户的生日）。
已有信息：生日（用户的生日）：1987年7月15日。
思考：第一句句子中提及生日，但并不是用户的生日，无法得出用户生日信息。从第二句句子可以得出用户生日在7月15日，与已有信息不矛盾，整合可以得出用户生日是1987年7月15日。
用户资料: <1987年7月15日>

示例3:
句子：用户在招商银行工作。
句子：用户刚刚毕业，第一份工作是银行前台。
句子：用户的理想工作是职业游戏选手。
类别：职业（用户的职业）
已有信息：职业（用户的职业）：
思考：整合第一和第二句句子的信息可以得出用户的现在的职业是招商银行前台。第三句句子说明了用户的理想工作但并不是现在的职业。
用户资料：<招商银行前台>

示例4:
句子：用户大学期间接触过优化算法的研究。
类别：学习专业 (用户大学学习的专业)
已有信息：学习专业 (用户大学学习的专业)：与人工智能相关
思考：从句子可以得出用户大学学习的专业与优化算法相关，这与已有信息（用户大学学习的专业与人工智能相关）不矛盾，整合可以得出用户大学学习的专业与人工智能和优化算法相关。
用户资料：<与人工智能和优化算法相关>

示例5:
句子：今天和同学去打球了。
句子：明天和女朋友一起去杭州旅游。
类别：学习专业 (用户大学学习的专业)
已有信息：学习专业 (用户大学学习的专业)：
思考：两个句子和学习专业都没有关联，没有新提取的信息。
用户资料：<无>
    """

    update_unique_profile_user_query: str = """
{user_query}
类别：{update_profile}
已有信息：{update_profile_value}
    """

    update_insight_system: str = """
从下面的句子中提取出给定类别的用户资料信息，并判断与已有信息是否矛盾，若矛盾以新信息为准。整合已有信息和新信息并输出。
请一步步思考，并按如下格式输出:
思考: 思考的依据和过程，150字以内。
用户资料: <信息>, 一定加<>
        """

    update_insight_few_shot: str = """
示例1:
句子：因为昨天成都下大雨，用户全身都被淋湿了。
句子：用户关心明天成都的天气预报。
类别：用户所在地区
已有信息：用户所在地区: 杭州
思考：从第一句句子可以得出用户在成都。第二句句子没有直接透露用户所在地信息，但与第一句句子用户在成都的信息吻合。这与已有信息（用户在杭州）矛盾，输出更新的信息。
用户资料：<成都>

示例2:
句子：用户最近养好了肠胃。
句子：用户关注中医养生。
类别：用户健康状况
已有信息：用户健康状况: 肠胃不好，高血压
思考：从第一句句子可以得出用户最近养好了肠胃，与已有信息矛盾，以新信息为准。第二句句子与用户健康状况无关。整合已有信息和新信息得到用户健康状况是肠胃健康，高血压。
用户资料：<肠胃健康，高血压>

示例3:
句子：用户刚刚毕业，第一份工作是银行前台。
句子：用户的理想工作是职业游戏选手。
类别：用户职业
已有信息：用户职业：在招商银行工作
思考：整合已有信息和第一句句子的信息可以得出用户的现在的职业是招商银行前台。第二句句子说明了用户的理想工作但并不是现在的职业。
用户资料：<招商银行前台>

示例4:
句子：用户大学期间接触过优化算法的研究。
类别：用户学习专业
已有信息：用户学习专业：与人工智能相关
思考：从句子可以得出用户大学学习的专业与优化算法相关，这与已有信息（用户学习专业与人工智能相关）不矛盾，整合可以得出用户大学学习的专业与人工智能和优化算法相关。
用户资料：<与人工智能和优化算法相关>

示例5:
句子：用户单身。
句子：用户受到一名18岁男生的追求，但不想接受又不想伤害他。
句子：用户喜欢成熟且情绪稳定的男生。
类别：用户情感状况
已有信息：用户情感状况：有男朋友
思考：从第一句句子可以得出用户现在单身，与已有信息矛盾，以新信息为准。从第二句句子得出用户受到一名18岁男生的追求但并不喜欢他。第三句话表达了用户理想的伴侣类型但与用户
情感状况无关。整合得出用户情感状况为单身，受到一名18岁男生的追求但并不喜欢他。
用户资料：<单身，受到一名18岁男生的追求但并不喜欢他。>
        """

    update_insight_user_query: str = """
{user_query}
类别：{insight_key}
已有信息：{insight_key_value}
        """
